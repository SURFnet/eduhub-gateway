#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const {hashPassword} = require('../policies/gatekeeper/authentication');

const credentialsFile = path.join(
  path.dirname(path.dirname(process.argv[1])),
  'config/credentials.json'
);

const randomString = () => crypto.randomBytes(16).toString('hex');
const createCredentials = (id) => {
  const password = randomString();
  const passwordSalt = randomString();
  return [password, {
    id,
    passwordSalt,
    passwordHash: hashPassword(password, passwordSalt)
  }];
}

let credentials;
try {
  credentials = JSON.parse(fs.readFileSync(credentialsFile, 'utf-8'));
} catch (err) {
  if (err.code === 'ENOENT') {
    credentials = {};
  } else {
    console.error(`Can't read from ${credentialsFile}: ${err}`);
    process.exit(1);
  }
}

const [action, appId] = process.argv.slice(2);

switch(action) {
case 'add':
  const [password, cred] = createCredentials(appId);
  credentials[appId] = cred;
  console.log(`${appId}:${password}`);
  break;
case 'delete':
  delete credentials[appId];
  break;
default:
  console.error('Usage: apps (add|delete) ID');
  process.exit(1);
}

try {
  fs.writeFileSync(
    credentialsFile,
    JSON.stringify(credentials, null, 2),
    'utf-8'
  );
} catch (err) {
  console.error(`Can't write to ${credentialsFile}: ${err}`);
  process.exit(1);
}
