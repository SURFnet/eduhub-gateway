#!/usr/bin/env node

const crypto = require('crypto')

const credentials = require('../policies/gatekeeper/credentials')
const authentication = require('../policies/gatekeeper/authentication')

const randomString = () => crypto.randomBytes(16).toString('hex')
const createCredentials = (id) => {
  const [password, passwordSalt] = [randomString(), randomString()]
  return [
    password,
    {
      passwordSalt,
      passwordHash: authentication.hashPassword(password, passwordSalt)
    }
  ]
}

const [action, id] = process.argv.slice(2)
const creds = credentials.read()
let password, cred

switch (action) {
  case 'create':
    if (creds[id]) {
      console.error('ID already taken')
      process.exit(1)
    }
    // fall through..

  case 'update':
    [password, cred] = createCredentials(id)
    creds[id] = cred
    credentials.write(creds)
    console.log(`${id}:${password}`)
    break

  case 'delete':
    delete creds[id]
    credentials.write(creds)
    break

  default:
    console.error('Usage: credentials (create|update|delete) ID')
    process.exit(1)
}
