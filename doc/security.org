#+TITLE: OOAPI Gateway Security

Since the OOAPI Gateway will be channeling sensitive information to
users over the public internet, we must make sure the implementation
will stay secure.

* Encryption

  The provided configuration and codebase must use in-flight
  encryption to protect users from eavesdropping by third parties.

  Strategy: the standard configurations provided will have TLS
  encryption configured for all connections to external services and
  for incoming connections from clients. Non-encrypted inncoming
  connections will not be accepted.

  Since we don't want to modify the ~Express Gateway~ codebase
  directly (see [[Updating dependencies][Updating Dependencies]]), this will need to be done via
  the standard configuration mechanism. Comments warning against
  changing the relevant settings will be included in the configuration
  as close as possible to those settings.

* Updating dependencies

  We will need to update the dependencies regularly to help patch the
  system against known issues.

  Strategy: avoid modifying dependencies down-stream. Use dependencies
  as provided. Only fork codebases temporarily, when changes will be
  integrated up-stream in a later release.

  In practice this means that ~Express Gateway~ is included as a
  straight dependency in [[../package.json]], that [[../package-lock.json]] is
  used to specify exact versions of all dependencies and we do not
  include ~node_modules~ in the repository.

  All OOAPI Gateway specific functionality is implemented using
  standard Express Gateway extension points (custom policies and
  configuration of standard mechanims).

* Logging

  The gateway logs should never include personally identifiable
  information or authentication data. Assume logs can persist for a long
  time and will be copied to different machines for auditing and
  debugging. It's hard to guarantee privacy for logs, so assume logs are
  not private.

  Strategy: be explicit about what will be logged.

  Request/response logging: never log a full request or response; do not
  log request or response bodies, do not log authentication tokens, user
  names, passwords, tokens or other credentials. Explicitly specify
  headers and other data to be logged (use allowlists, not
  denylists). Do not relax these constraints when logging failed
  attempts at authentication.

  Configuration logging: never log credentials from the configuration.

* Caching

  A buggy caching algorithm can leak information between users. The best
  way to prevent bugs is to make the codebase simpler and smaller.

  Strategy: cache as little as possible.

  Reponse caching: because some information returned can be personal,
  do not cache responses or response content to avoid returning
  personalized data to the wrong users.

  Temporary authentication tokens: OAuth and OpenID Connect use
  temporary tokens for authentication. When using these authentication
  mechanisms for authenticating the gateway against the backend
  services, the temporary tokens should be cached to prevent overloading
  the identity providers. Code dealing with these caches must be
  reviewed strictly and have extensive automated tests.

