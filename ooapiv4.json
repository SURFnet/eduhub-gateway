{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "Open Education API",
    "description" : "OpenAPI (fka Swagger) specification for the Open Education API.\n\n<figure>\n\t<a target=\"_blank\" href=\"OOAPI_model_v4.png\">\n  <img src=\"OOAPI_model_v4.png\" alt=\"OOAPI information model that feeds OOAPI specification\" width=\"70%\" class=\"img-responsive\">\n  </a>\n  <figcaption> OOAPI information model that feeds OOAPI specification (click to enlage)</figcaption>\n</figure>\n\nThe model provides an overview of how the objects on which the API is specified are related. The overarching concept educations is not found in the in the end points of the API. The smaller concepts of programOffering, courseOffering and conceptOffering are all found in the offering endpoint. The different types of association can all be found in the association endpoint. \n\nThe program relations object is not found as a separate endpoint but relations between programs can be found within the program endpoint by expanding that endpoint.\n\nInformation about earlier meetings and presentations can be found <a target=\"_blank\" href=\"https://github.com/open-education-api/notulen\">here</a>\n\nInformation on the EDU-API model that was also used for this api is shown <a target=\"_blank\" href=\"eduapi.png\">here</a>\n",
    "version" : "4.0",
    "x-logo" : {
      "url" : "../logo.png"
    }
  },
  "servers" : [ {
    "url" : "/"
  } ],
  "tags" : [ {
    "name" : "service metadata",
    "description" : "The service API provides additional metadata needed to make the OOAPI fit for this organization."
  }, {
    "name" : "academic sessions",
    "description" : "The academic sessions API provides information about the different time periods a program can be offered."
  }, {
    "name" : "associations",
    "description" : "The associations API provides information about the association between an offering and a person (e.g. students, lecturers, etc)."
  }, {
    "name" : "buildings",
    "description" : "The building API provides a building that is currently used by the organization. Including all location details."
  }, {
    "name" : "courses",
    "description" : "The courses API provides a self-contained and formally structured learning experience. Aimed at providing learning outcomes to students. Usually placed in the context of a program."
  }, {
    "name" : "components",
    "description" : "The components API provides information about components being part of parent courses."
  }, {
    "name" : "news",
    "description" : "The news API provides news feeds and items regarding a specific subject."
  }, {
    "name" : "offerings",
    "description" : "The offerings API provides information about offerings which have a global timeframe, e.g. a period to which students can enroll."
  }, {
    "name" : "organizations",
    "description" : "The organizations API provides the organizations that are responsible for the execution and recognition of education."
  }, {
    "name" : "persons",
    "description" : "The persons API provides information about persons related to an organization."
  }, {
    "name" : "programs",
    "description" : "The programs API provides a coherent set of educational components, aimed at the realization of competences or objectives in the field of knowledge, insight, attitudes and skills that the person who completes the program must have."
  }, {
    "name" : "rooms",
    "description" : "The rooms API provides the part of a building where an activity can take place. Including detail information on the resources available, number of seats, etc. (Updated continuously)"
  }, {
    "name" : "query information (use of q)",
    "description" : "Endpoints can be searched using the q parameter. This parameter acts as a filter for the endpoint it filters items having a:\n* name,\n* abbreviation or\n* description\n\ncontaining the given search term (exact partial match, case insensitive)\n\n# Examples\n<pre lang=\"json\"><code class=\"json\">\nGET /programs?q=stud\n\nResult:\n{\n  \"programId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"type\": \"alliance\",\n  <strong>\"name\": \"Student Mobility\",\n  \"abbreviation\": \"studM\",\n  \"description\": \"program that is a place holder for all courses that are made available for student mobility\",</strong>\n  \"ects\": 5,\n  \"qualificationAwarded\": \"None\",\n  \"lengthOfProgram\": 6,\n  \"levelOfQualification\": 6,\n  \"sector\": \"university education\",\n  \"fieldsOfStudy\": \"0732\",\n  \"crohoCreboCode\": \"59312\",\n  \"profileOfProgram\": \"the program is meant to be a place holder for all courses that can be exchanged between Universities, therefore there is no main focus for this program\",\n  \"learningOutcomes\": [\n  \"string\"\n  ],\n  \"admissionRequirements\": \"Students need to be enrolled at qualifying institutions of higher education that participate in this alliance\",\n  \"qualificationRequirements\": \"None\",\n  \"link\": \"https://bijvak.nl\",\n  \"ext\": { }\n}\n</code></pre>\n"
  }, {
    "name" : "expand information",
    "description" : "Most endpoints also provide additional information which is not provided by default. To obtain this information we use an expand mechanism\n\n# Endpoints which are expandable\n* academic-session\n* association\n* component\n* component-offering\n* course\n* course-offering\n* organization\n* program\n* program-offering\n* room\n\n# Examples\nFirst expand the program only to show additional parent information:\n```\nGET /programs/{programId}?expand=parent\n\nResult:\n{\n\"programId\": \"123e4567-e89b-12d3-a456-426614174000\",\n\"type\": \"alliance\",\n\"name\": \"Student Mobility\",\n\"abbreviation\": \"studM\",\n\"description\": \"program that is a place holder for all courses that are made available for student mobility\",\n\"ects\": 5,\n\"qualificationAwarded\": \"None\",\n\"lengthOfProgram\": 6,\n\"levelOfQualification\": 6,\n\"sector\": \"university education\",\n\"fieldsOfStudy\": \"0732\",\n\"crohoCreboCode\": \"59312\",\n\"profileOfProgram\": \"the program is meant to be a place holder for all courses that can be exchanged between Universities, therefore there is no main focus for this program\",\n\"learningOutcomes\": [\n\"string\"\n],\n\"admissionRequirements\": \"Students need to be enrolled at qualifying institutions of higher education that participate in this alliance\",\n\"qualificationRequirements\": \"None\",\n\"link\": \"https://bijvak.nl\",\n\"ext\": { },\n\"parent\": {\n  \"programId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"type\": \"alliance\",\n  \"name\": \"Student Mobility\",\n  \"abbreviation\": \"studM\",\n  \"description\": \"program that is a place holder for all courses that are made available for student mobility\",\n  \"ects\": 5,\n  \"qualificationAwarded\": \"None\",\n  \"lengthOfProgram\": 6,\n  \"levelOfQualification\": 6,\n  \"sector\": \"university education\",\n  \"fieldsOfStudy\": \"0732\",\n  \"crohoCreboCode\": \"59312\",\n  \"profileOfProgram\": \"the program is meant to be a place holder for all courses that can be exchanged between Universities, therefore there is no main focus for this program\",\n  \"learningOutcomes\": [\n  \"string\"\n  ],\n  \"admissionRequirements\": \"Students need to be enrolled at qualifying institutions of higher education that participate in this alliance\",\n  \"qualificationRequirements\": \"None\",\n  \"link\": \"https://bijvak.nl\",\n  \"ext\": { }\n}\n}\n```\n\nWhen additional information is needed on a program the program information can be expanded further by including additional parameters in an array style. If no values are provided for expand there will be no additional information provided. An empty expand parameter will be handled in the same manner as the normal GET function to the API.\n\n\n```\nGET /programs/{programId}?expand=parent,children,organization\n\nResult:\n{\n\"programId\": \"123e4567-e89b-12d3-a456-426614174000\",\n\"type\": \"alliance\",\n\"name\": \"Student Mobility\",\n\"abbreviation\": \"studM\",\n\"description\": \"program that is a place holder for all courses that are made available for student mobility\",\n\"ects\": 5,\n\"qualificationAwarded\": \"None\",\n\"lengthOfProgram\": 6,\n\"levelOfQualification\": 6,\n\"sector\": \"university education\",\n\"fieldsOfStudy\": \"0732\",\n\"crohoCreboCode\": \"59312\",\n\"profileOfProgram\": \"the program is meant to be a place holder for all courses that can be exchanged between Universities, therefore there is no main focus for this program\",\n\"learningOutcomes\": [\n\"string\"\n],\n\"admissionRequirements\": \"Students need to be enrolled at qualifying institutions of higher education that participate in this alliance\",\n\"qualificationRequirements\": \"None\",\n\"link\": \"https://bijvak.nl\",\n\"ext\": { },\n\"parent\": {\n  \"programId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"type\": \"alliance\",\n  \"name\": \"Student Mobility\",\n  \"abbreviation\": \"studM\",\n  \"description\": \"program that is a place holder for all courses that are made available for student mobility\",\n  \"ects\": 5,\n  \"qualificationAwarded\": \"None\",\n  \"lengthOfProgram\": 6,\n  \"levelOfQualification\": 6,\n  \"sector\": \"university education\",\n  \"fieldsOfStudy\": \"0732\",\n  \"crohoCreboCode\": \"59312\",\n  \"profileOfProgram\": \"the program is meant to be a place holder for all courses that can be exchanged between Universities, therefore there is no main focus for this program\",\n  \"learningOutcomes\": [\n  \"string\"\n  ],\n  \"admissionRequirements\": \"Students need to be enrolled at qualifying institutions of higher education that participate in this alliance\",\n  \"qualificationRequirements\": \"None\",\n  \"link\": \"https://bijvak.nl\",\n  \"ext\": { }\n},\n\"children\": [\n  {\n  \"programId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"type\": \"alliance\",\n  \"name\": \"Student Mobility\",\n  \"abbreviation\": \"studM\",\n  \"description\": \"program that is a place holder for all courses that are made available for student mobility\",\n  \"ects\": 5,\n  \"qualificationAwarded\": \"None\",\n  \"lengthOfProgram\": 6,\n  \"levelOfQualification\": 6,\n  \"sector\": \"university education\",\n  \"fieldsOfStudy\": \"0732\",\n  \"crohoCreboCode\": \"59312\",\n  \"profileOfProgram\": \"the program is meant to be a place holder for all courses that can be exchanged between Universities, therefore there is no main focus for this program\",\n  \"learningOutcomes\": [\n  \"string\"\n  ],\n  \"admissionRequirements\": \"Students need to be enrolled at qualifying institutions of higher education that participate in this alliance\",\n  \"qualificationRequirements\": \"None\",\n  \"link\": \"https://bijvak.nl\",\n  \"ext\": { }\n  }\n],\n\"organization\": {\n  \"organizationId\": \"123e4567-e89b-12d3-a456-123514174000\",\n  \"name\": \"Coöperatie SURF U.A.\",\n  \"shortName\": \"SURF\",\n  \"description\": \"SURF is een coöperatieve vereniging van Nederlandse onderwijs- en onderzoeksinstellingen waarin de leden hun krachten bundelen. De leden zijn eigenaar van SURF.\",\n  \"type\": \"root\",\n  \"addresses\": [\n  {\n  \"type\": \"postal\",\n  \"street\": \"Moreelsepark\",\n  \"streetNumber\": 48,\n  \"additional\": \"On the other side of the road\",\n  \"postalCode\": \"3511 EP\",\n  \"city\": \"Utrecht\",\n  \"countryCode\": \"NL\",\n  \"geolocation\": {\n  \"latitude\": 52.089123,\n  \"longitude\": 5.113337\n  },\n  \"ext\": { }\n  }\n  ],\n  \"link\": \"https://surf.nl\",\n  \"logo\": \"https://www.surf.nl/themes/surf/logo.svg\",\n  \"brin\": \"00AA\",\n  \"ext\": { }\n}\n}\n```\n"
  }, {
    "name" : "sorting information",
    "description" : "Most endpoints provide sorting. To sort you can sort on the elements that are specified per endpoint. All elements can be sorted ascending by default o descending, \nby adding \"-\" in front of the element to be sorted. The sorting takes place based on comma separated values. e.g.:\n\n```\nGET /programs?sort=programId\n```\nprovides a list of all programs sorted ascending based on programId\n```\nGET /programs?sort=name,-ects\n```\nprovides a list of all programs first sorted on name ascending and ects descending\n"
  }, {
    "name" : "extension information",
    "description" : "Most endpoints can be extended. This can be done by providing the extended information in the designated \"ext\" area of the endpoint. All users of the OOAPI are encouraged to feed their extensions back to the OOAPI working group so this information can be used as feedback for future versions of the OOAPI.\n"
  }, {
    "name" : "Error responses",
    "description" : "Error responses are formatted in the `problem+json` media type ([RFC7807](https://tools.ietf.org/html/rfc7807)):\n```\n{\n  \"code\": 404,\n  \"title\": \"Resource not found\"\n}\n```\n"
  } ],
  "paths" : {
    "/" : {
      "get" : {
        "tags" : [ "service metadata" ],
        "summary" : "GET /",
        "description" : "Get metadata for the service.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Service"
                }
              }
            }
          }
        }
      }
    },
    "/persons" : {
      "get" : {
        "tags" : [ "persons" ],
        "summary" : "GET /persons",
        "description" : "Get an ordered list of all persons.",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "affiliations",
          "in" : "query",
          "description" : "Filter by affiliations",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "student", "employee", "guest" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "personId", "givenName", "surName", "displayName", "-personId", "-givenName", "-surName", "-displayName" ]
            },
            "default" : "personId"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}" : {
      "get" : {
        "tags" : [ "persons" ],
        "summary" : "GET /persons/{personId}",
        "description" : "Get a single person.",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Person"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/associations" : {
      "get" : {
        "tags" : [ "persons" ],
        "summary" : "GET /persons/{personId}/associations",
        "description" : "Get a list of all associations for an individual person.",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by association type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "programOffering", "courseOffering", "componentOffering" ]
          }
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "Filter by role",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "student", "lecturer", "student assistent", "coordinator", "guest" ]
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Filter by state",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "pending", "canceled", "denied", "associated" ]
          }
        }, {
          "name" : "result-state",
          "in" : "query",
          "description" : "Filter by result state",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "in progress", "postponed", "completed" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "associationId", "-associationId" ]
            },
            "default" : "associationId"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/organizations" : {
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "GET /organizations",
        "description" : "Get an ordered list of all organizations, ordered by name.",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by organization type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "root", "institution", "department", "faculty" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "organizationId", "name", "-organizationId", "-name" ]
            },
            "default" : "name"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}" : {
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "GET /organizations/{organizationId}",
        "description" : "Get a single organization.",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "Organization ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "Optional properties to include, separated by a comma",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "parent", "children" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationExpanded"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/programs" : {
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "GET /organizations/{organizationId}/programs",
        "description" : "Get an ordered list of all programs for a given organization, ordered by name.",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "Organization ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by program type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "program", "minor", "honours", "specialization", "electives", "module", "track", "joint-degree", "alliance" ]
          }
        }, {
          "name" : "qualificationAwarded",
          "in" : "query",
          "description" : "Filter by qualificationAwarded",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "AD", "BA", "BSc", "LLB", "MA", "MSc", "LLM", "PhD", "None" ]
          }
        }, {
          "name" : "levelOfQualification",
          "in" : "query",
          "description" : "Filter by levelOfQualification",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "1", "2", "3", "4", "4+", "5", "6", "7", "8" ]
          }
        }, {
          "name" : "sector",
          "in" : "query",
          "description" : "Filter by sector",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "secondary vocational education", "higher professional education", "university education" ]
          }
        }, {
          "name" : "fieldsOfStudy",
          "in" : "query",
          "description" : "Filter by fieldsOfStudy",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "croho-creboCode",
          "in" : "query",
          "description" : "Filter by croho-creboCode",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "programId", "name", "ects", "-programId", "-name", "-ects" ]
            },
            "default" : "name"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/courses" : {
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "GET /organizations/{organizationId}/courses",
        "description" : "Get an ordered list of all courses for a given organization, ordered by name.",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "Organization ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "level",
          "in" : "query",
          "description" : "Filter by level",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "secondary vocational education 3", "secondary vocational education 4", "associate degree", "bachelor", "master", "doctoral" ]
          }
        }, {
          "name" : "modeOfDelivery",
          "in" : "query",
          "description" : "Filter by modeOfDelivery",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "distance-learning", "on campus", "online", "hybrid", "situated" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "courseId", "name", "ects", "-courseId", "-name", "-ects" ]
            },
            "default" : "name"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_4"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/components" : {
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "GET /organizations/{organizationId}/components",
        "description" : "Get an ordered list of all components for a given organization, ordered by name.",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "Organization ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by component type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "test", "lecture", "practical", "tutorial", "consultation", "project", "workshop", "excursion", "independent study", "external", "skills training" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "componentId", "name", "-componentId", "-name" ]
            },
            "default" : "name"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_5"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/offerings" : {
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "GET /organizations/{organizationId}/offerings",
        "description" : "Get a list of all offerings for a given organization",
        "parameters" : [ {
          "name" : "organizationId",
          "in" : "path",
          "description" : "Organization ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by offering type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "program", "course", "component" ]
          }
        }, {
          "name" : "mainLanguage",
          "in" : "query",
          "description" : "Filter by mainLanguage",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "nl-nl", "en-gb" ]
          }
        }, {
          "name" : "isLineItem",
          "in" : "query",
          "description" : "Filter by isLineItem",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "Filter all offerings by providing a minimum start date for the corresponding academic session, RFC3339 (full-date). By default only future offerings are shown (equal to `?since=<today>`).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "until",
          "in" : "query",
          "description" : "Filter all offerings by providing a maximum end date for the corresponding academic session, RFC3339 (full-date).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "offeringId", "name", "startDate", "endDate", "-offeringId", "-name", "-startDate", "-endDate" ]
            },
            "default" : "startDate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_6"
                }
              }
            }
          }
        }
      }
    },
    "/academic-sessions" : {
      "get" : {
        "tags" : [ "academic sessions" ],
        "summary" : "GET /academic-sessions",
        "description" : "Get a list of all academic sessions, ordered chronologically.",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "parent",
          "in" : "query",
          "description" : "Filter by parent (academicSessionId), may be empty to retrieve all years (which have no parent)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "year",
          "in" : "query",
          "description" : "Filter by year (academicSessionId)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "academicSessionId", "name", "startDate", "-academicSessionId", "-name", "-startDate" ]
            },
            "default" : "startDate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_7"
                }
              }
            }
          }
        }
      }
    },
    "/academic-sessions/{academicSessionId}" : {
      "get" : {
        "tags" : [ "academic sessions" ],
        "summary" : "GET /academic-sessions/{academicSessionId}",
        "description" : "Get a single academic session.",
        "parameters" : [ {
          "name" : "academicSessionId",
          "in" : "path",
          "description" : "Academic session ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "Optional properties to include, separated by a comma",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "parent", "year" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AcademicSessionExpanded"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/academic-sessions/{academicSessionId}/offerings" : {
      "get" : {
        "tags" : [ "academic sessions" ],
        "summary" : "GET /academic-sessions/{academicSessionId}/offerings",
        "description" : "Get a list of all offerings during this academic session",
        "parameters" : [ {
          "name" : "academicSessionId",
          "in" : "path",
          "description" : "Academic session ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by offering type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "program", "course", "component" ]
          }
        }, {
          "name" : "mainLanguage",
          "in" : "query",
          "description" : "Filter by mainLanguage",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "nl-nl", "en-gb" ]
          }
        }, {
          "name" : "isLineItem",
          "in" : "query",
          "description" : "Filter by isLineItem",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "Filter all offerings by providing a minimum start date for the corresponding academic session, RFC3339 (full-date). By default only future offerings are shown (equal to `?since=<today>`).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "until",
          "in" : "query",
          "description" : "Filter all offerings by providing a maximum end date for the corresponding academic session, RFC3339 (full-date).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "offeringId", "name", "startDate", "endDate", "-offeringId", "-name", "-startDate", "-endDate" ]
            },
            "default" : "startDate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_6"
                }
              }
            }
          }
        }
      }
    },
    "/programs" : {
      "get" : {
        "tags" : [ "programs" ],
        "summary" : "GET /programs",
        "description" : "Get an ordered list of all programs, ordered by name.",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by program type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "program", "minor", "honours", "specialization", "electives", "module", "track", "joint-degree", "alliance" ]
          }
        }, {
          "name" : "qualificationAwarded",
          "in" : "query",
          "description" : "Filter by qualificationAwarded",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "AD", "BA", "BSc", "LLB", "MA", "MSc", "LLM", "Phd", "None" ]
          }
        }, {
          "name" : "levelOfQualification",
          "in" : "query",
          "description" : "Filter by levelOfQualification",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "1", "2", "3", "4", "4+", "5", "6", "7", "8" ]
          }
        }, {
          "name" : "sector",
          "in" : "query",
          "description" : "Filter by sector",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "secondary vocational education", "higher professional education", "university education" ]
          }
        }, {
          "name" : "fieldsOfStudy",
          "in" : "query",
          "description" : "Filter by fieldsOfStudy",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crohoCreboCode",
          "in" : "query",
          "description" : "Filter by crohoCreboCode",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "programId", "name", "ects", "-programId", "-name", "-ects" ]
            },
            "default" : "name"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                }
              }
            }
          }
        }
      }
    },
    "/programs/{programId}" : {
      "get" : {
        "tags" : [ "programs" ],
        "summary" : "GET /programs/{programId}",
        "description" : "Get a single program.",
        "parameters" : [ {
          "name" : "programId",
          "in" : "path",
          "description" : "Program ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "Optional properties to include, separated by a comma",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "parent", "children", "organization" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProgramExpanded"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/programs/{programId}/courses" : {
      "get" : {
        "tags" : [ "programs" ],
        "summary" : "GET /programs/{programId}/courses",
        "description" : "Get an ordered list of all courses given through this program.",
        "parameters" : [ {
          "name" : "programId",
          "in" : "path",
          "description" : "Program ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "level",
          "in" : "query",
          "description" : "Filter by level",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "secondary vocational education 3", "secondary vocational education 4", "associate degree", "bachelor", "master", "doctoral" ]
          }
        }, {
          "name" : "modeOfDelivery",
          "in" : "query",
          "description" : "Filter by modeOfDelivery",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "distance-learning", "on campus", "online", "hybrid", "situated" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "courseId", "name", "ects", "-courseId", "-name", "-ects" ]
            },
            "default" : "courseId"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_4"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/programs/{programId}/offerings" : {
      "get" : {
        "tags" : [ "programs" ],
        "summary" : "GET /programs/{programId}/offerings",
        "description" : "Get a list of all offerings for this program, ordered chronologically.",
        "parameters" : [ {
          "name" : "programId",
          "in" : "path",
          "description" : "Program ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mainLanguage",
          "in" : "query",
          "description" : "Filter by mainLanguage",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "nl-nl", "en-gb" ]
          }
        }, {
          "name" : "modeOfStudy",
          "in" : "query",
          "description" : "Filter by modeOfStudy",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "full-time", "part-time", "dual", "self-paced" ]
          }
        }, {
          "name" : "isLineItem",
          "in" : "query",
          "description" : "Filter by isLineItem",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "Filter all offerings by providing a minimum start date for the corresponding academic session, RFC3339 (full-date). By default only future offerings are shown (equal to `?since=<today>`).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "until",
          "in" : "query",
          "description" : "Filter all offerings by providing a maximum end date for the corresponding academic session, RFC3339 (full-date).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "offeringId", "name", "startDate", "endDate", "-offeringId", "-name", "-startDate", "-endDate" ]
            },
            "default" : "startDate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/courses" : {
      "get" : {
        "tags" : [ "courses" ],
        "summary" : "GET /courses",
        "description" : "Get a list of all courses, ordered by name (ascending).",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "level",
          "in" : "query",
          "description" : "Filter by level",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "secondary vocational education 3", "secondary vocational education 4", "associate degree", "bachelor", "master", "doctoral" ]
          }
        }, {
          "name" : "modeOfDelivery",
          "in" : "query",
          "description" : "Filter by modeOfDelivery",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "distance-learning", "on campus", "online", "hybrid", "situated" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "courseId", "name", "ects", "-courseId", "-name", "-ects" ]
            },
            "default" : "name"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_4"
                }
              }
            }
          }
        }
      }
    },
    "/courses/{courseId}" : {
      "get" : {
        "tags" : [ "courses" ],
        "summary" : "GET /courses/{courseId}",
        "description" : "Get a single course.",
        "parameters" : [ {
          "name" : "courseId",
          "in" : "path",
          "description" : "Course ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "Optional properties to include, separated by a comma",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "programs", "coordinator", "organization" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CourseExpanded"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/courses/{courseId}/components" : {
      "get" : {
        "tags" : [ "courses" ],
        "summary" : "GET /courses/{courseId}/components",
        "description" : "Get an ordered list of all course components.",
        "parameters" : [ {
          "name" : "courseId",
          "in" : "path",
          "description" : "Course ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by component type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "test", "lecture", "practical", "tutorial", "consultation", "project", "workshop", "excursion", "independent study", "external", "skills training" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "componentId", "name", "-componentId", "-name" ]
            },
            "default" : "componentId"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_5"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/courses/{courseId}/offerings" : {
      "get" : {
        "tags" : [ "courses" ],
        "summary" : "GET /courses/{courseId}/offerings",
        "description" : "Get a list of all offerings for this course, ordered chronologically.",
        "parameters" : [ {
          "name" : "courseId",
          "in" : "path",
          "description" : "Course ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mainLanguage",
          "in" : "query",
          "description" : "Filter by mainLanguage",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "nl-nl", "en-gb" ]
          }
        }, {
          "name" : "modeOfStudy",
          "in" : "query",
          "description" : "Filter by modeOfStudy",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "full-time", "part-time", "dual training", "self-paced" ]
          }
        }, {
          "name" : "isLineItem",
          "in" : "query",
          "description" : "Filter by isLineItem",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "Filter all offerings by providing a minimum start date for the corresponding academic session, RFC3339 (full-date). By default only future offerings are shown (equal to `?since=<today>`).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "until",
          "in" : "query",
          "description" : "Filter all offerings by providing a maximum end date for the corresponding academic session, RFC3339 (full-date).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "offeringId", "name", "startDate", "endDate", "-offeringId", "-name", "-startDate", "-endDate" ]
            },
            "default" : "startDate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_9"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/components/{componentId}" : {
      "get" : {
        "tags" : [ "components" ],
        "summary" : "GET /components/{componentId}",
        "description" : "Get a single component.",
        "parameters" : [ {
          "name" : "componentId",
          "in" : "path",
          "description" : "component ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "Optional properties to include, separated by a comma",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "course", "organization" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ComponentExpanded"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/components/{componentId}/offerings" : {
      "get" : {
        "tags" : [ "components" ],
        "summary" : "GET /components/{componentId}/offerings",
        "description" : "Get a list of all offerings for this component, ordered chronologically.",
        "parameters" : [ {
          "name" : "componentId",
          "in" : "path",
          "description" : "Component ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mainLanguage",
          "in" : "query",
          "description" : "Filter by mainLanguage",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "nl-nl", "en-gb" ]
          }
        }, {
          "name" : "isLineItem",
          "in" : "query",
          "description" : "Filter by isLineItem",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "Filter all offerings by providing a minimum start date for the corresponding academic session, RFC3339 (full-date). By default only future offerings are shown (equal to `?since=<today>`).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "until",
          "in" : "query",
          "description" : "Filter all offerings by providing a maximum end date for the corresponding academic session, RFC3339 (full-date).",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "offeringId", "name", "startDateTime", "endDateTime", "-offeringId", "-name", "-startDateTime", "-endDateTime" ]
            },
            "default" : "startDateTime"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/offerings/{offeringId}" : {
      "get" : {
        "tags" : [ "offerings" ],
        "summary" : "GET /offerings/{offeringId}",
        "description" : "Get a single offering.",
        "parameters" : [ {
          "name" : "offeringId",
          "in" : "path",
          "description" : "Offering ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "Optional properties to include, separated by a comma",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "program", "programOffering", "course", "courseOffering", "component", "organization", "academicSession" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_11"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/offerings/{offeringId}/associations" : {
      "get" : {
        "tags" : [ "offerings" ],
        "summary" : "GET /offerings/{offeringId}/associations",
        "description" : "Get a list of all offering associations.",
        "parameters" : [ {
          "name" : "offeringId",
          "in" : "path",
          "description" : "Offering ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by association type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "programOffering", "courseOffering", "componentOffering" ]
          }
        }, {
          "name" : "role",
          "in" : "query",
          "description" : "Filter by role",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "student", "lecturer", "student assistent", "coordinator", "guest" ]
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Filter by state",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "pending", "canceled", "denied", "associated" ]
          }
        }, {
          "name" : "result-state",
          "in" : "query",
          "description" : "Filter by result state",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "in progress", "postponed", "completed" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "associationId", "-associationId" ]
            },
            "default" : [ "associationId" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_12"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/associations/{associationId}" : {
      "get" : {
        "tags" : [ "associations" ],
        "summary" : "GET /associations/{associationId}",
        "description" : "Get a single association.",
        "parameters" : [ {
          "name" : "associationId",
          "in" : "path",
          "description" : "Association ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "Optional properties to include, separated by a comma",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "persons", "offering" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssociationExpanded"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/buildings" : {
      "get" : {
        "tags" : [ "buildings" ],
        "summary" : "GET /buildings",
        "description" : "Get a list of all buildings, ordered by name (ascending).",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "buildingId", "name", "-buildingId", "-name" ]
            },
            "default" : "name"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_13"
                }
              }
            }
          }
        }
      }
    },
    "/buildings/{buildingId}" : {
      "get" : {
        "tags" : [ "buildings" ],
        "summary" : "GET /buildings/{buildingId}",
        "description" : "Get a single building.",
        "parameters" : [ {
          "name" : "buildingId",
          "in" : "path",
          "description" : "Building ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Building"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/buildings/{buildingId}/rooms" : {
      "get" : {
        "tags" : [ "buildings" ],
        "summary" : "GET /buildings/{buildingId}/rooms",
        "description" : "Get a list of all rooms in a building.",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by room type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "general purpose", "lecture room", "computer room", "laboratory", "office", "workspace", "exam location", "study room", "examination room", "conference room" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "roomId", "name", "totalSeats", "availableSeats", "-roomId", "-name", "-totalSeats", "-availableSeats" ]
            },
            "default" : "name"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_14"
                }
              }
            }
          }
        }
      }
    },
    "/rooms" : {
      "get" : {
        "tags" : [ "rooms" ],
        "summary" : "GET /rooms",
        "description" : "Get a list of all rooms, ordered by name (ascending).",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by room type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "general purpose", "lecture room", "computer room", "laboratory", "office", "workspace", "exam location", "study room", "examination room", "conference room" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "roomId", "name", "totalSeats", "availableSeats", "-roomId", "-name", "-totalSeats", "-availableSeats" ]
            },
            "default" : "name"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_14"
                }
              }
            }
          }
        }
      }
    },
    "/rooms/{roomId}" : {
      "get" : {
        "tags" : [ "rooms" ],
        "summary" : "GET /rooms/{roomId}",
        "description" : "Get a single room.",
        "parameters" : [ {
          "name" : "roomId",
          "in" : "path",
          "description" : "Room ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "expand",
          "in" : "query",
          "description" : "Optional properties to include, separated by a comma",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "building" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RoomExpanded"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/news-feeds" : {
      "get" : {
        "tags" : [ "news" ],
        "summary" : "GET /news-feeds",
        "description" : "Get a list of all news feeds, ordered by title.",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by news type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "organization", "program", "course", "component", "person", "building", "room" ]
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "newsFeedId", "name", "-newsFeedId", "-name" ]
            },
            "default" : "name"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_15"
                }
              }
            }
          }
        }
      }
    },
    "/news-feeds/{newsFeedId}" : {
      "get" : {
        "tags" : [ "news" ],
        "summary" : "GET /news-feeds/{newsFeedId}",
        "description" : "Get a single news feed.",
        "parameters" : [ {
          "name" : "newsFeedId",
          "in" : "path",
          "description" : "News feed ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NewsFeed"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/news-feeds/{newsFeedId}/news-items" : {
      "get" : {
        "tags" : [ "news" ],
        "summary" : "GET /news-feeds/{newsFeedId}/news-items",
        "description" : "Get an ordered list of all news items.",
        "parameters" : [ {
          "name" : "newsFeedId",
          "in" : "path",
          "description" : "News feed ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items per page",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "enum" : [ 10, 20, 50, 100, 250 ],
            "default" : 10
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Filter by items having a name, abbreviation or description containing the given search term (exact partial match, case insensitive)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "author",
          "in" : "query",
          "description" : "Filter by author",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort by one or more attributes, the default is ascending. Prefixing the attribute with a minus sign `-` allows for descending sort. Examples: [ATTR | -ATTR | ATTR1,-ATTR2]",
          "required" : false,
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "newsItemId", "name", "validFrom", "validUntil", "lastModified", "-newsItemId", "-name", "-validFrom", "-validUntil", "-lastModified" ]
            },
            "default" : "newsItemId"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_16"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    },
    "/news-items/{newsItemId}" : {
      "get" : {
        "tags" : [ "news" ],
        "summary" : "GET /news-items/{newsItemId}",
        "description" : "Get a single news item.",
        "parameters" : [ {
          "name" : "newsItemId",
          "in" : "path",
          "description" : "News item ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NewsItem"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Problem"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Service" : {
        "required" : [ "contactEmail", "documentation", "specification" ],
        "type" : "object",
        "properties" : {
          "contactEmail" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "Contact e-mail address of the service owner",
            "format" : "email",
            "example" : "admin@universiteitvanharderwijk.nl"
          },
          "specification" : {
            "maxLength" : 2048,
            "type" : "string",
            "description" : "URL of the API specification (YAML or JSON, compliant with [Open API Specification v3](https://github.com/OAI/OpenAPI-Specification/))",
            "format" : "uri",
            "example" : "https://rawgit.com/open-education-api/specification/v3/docs.html#tag/course-offerings/paths/~1course-offerings/get"
          },
          "documentation" : {
            "maxLength" : 2048,
            "type" : "string",
            "description" : "URL of the API documentation, including general terms and privacy statement",
            "format" : "uri",
            "example" : "https://open-education-api.github.io/specification/v4/docs.html"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "Person" : {
        "required" : [ "affiliations", "displayName", "givenName", "mail", "personId", "surname" ],
        "type" : "object",
        "properties" : {
          "personId" : {
            "type" : "string",
            "description" : "Unique id of this person",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-426614174000"
          },
          "givenName" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The first name of this person",
            "example" : "Maartje"
          },
          "surnamePrefix" : {
            "type" : "string",
            "description" : "The prefix of the family name of this person",
            "example" : "van"
          },
          "surname" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The family name of this person",
            "example" : "Damme"
          },
          "displayName" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name of this person which will be displayed",
            "example" : "Maartje van Damme"
          },
          "initials" : {
            "type" : "string",
            "description" : "The initials of this person",
            "example" : "MCW"
          },
          "dateOfBirth" : {
            "type" : "string",
            "description" : "The date of birth of this person, RFC3339 (full-date)",
            "format" : "date",
            "example" : "2003-09-30"
          },
          "cityOfBirth" : {
            "type" : "string",
            "description" : "The city of birth of this person",
            "example" : "Utrecht"
          },
          "countryOfBirth" : {
            "type" : "string",
            "description" : "The country of birth of this person the country code according to [iso-3166-1-alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)",
            "example" : "NL"
          },
          "nationality" : {
            "type" : "string",
            "description" : "The nationality of this person the nationality according to https://gist.github.com/zspine/2365808",
            "example" : "Dutch"
          },
          "dateOfNationality" : {
            "type" : "string",
            "description" : "The date of nationality of this person, RFC3339 (full-date)",
            "format" : "date",
            "example" : "2003-09-30"
          },
          "affiliations" : {
            "type" : "array",
            "description" : "The affiliations of this person, the relations a person has with the organization providing this endpoint",
            "items" : {
              "type" : "string",
              "example" : "student",
              "enum" : [ "student", "employee", "guest" ]
            }
          },
          "mail" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The primary e-mailaddress of this person",
            "format" : "email",
            "example" : "vandamme.mcw@universiteitvanharderwijk.nl"
          },
          "secondaryMail" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The secondary e-mailaddress of this person",
            "format" : "email",
            "example" : "poekie@xyz.nl"
          },
          "telephoneNumber" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The telephone number of this person",
            "example" : "+31 123 456 789"
          },
          "mobileNumber" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The mobile number of this person",
            "example" : "+31 612 345 678"
          },
          "photoSocial" : {
            "maxLength" : 2048,
            "type" : "string",
            "description" : "The url of the informal picture of this person",
            "format" : "uri",
            "example" : "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/Placeholder_female_superhero_c.png/203px-Placeholder_female_superhero_c.png"
          },
          "photoOfficial" : {
            "maxLength" : 2048,
            "type" : "string",
            "description" : "The url of the official picture of this person",
            "format" : "uri",
            "example" : "https://upload.wikimedia.org/wikipedia/commons/6/66/Johannes_Vermeer_%281632-1675%29_-_The_Girl_With_The_Pearl_Earring_%281665%29.jpg"
          },
          "gender" : {
            "type" : "string",
            "description" : "The gender of this person",
            "example" : "F",
            "enum" : [ "M", "F", "U", "X" ]
          },
          "titlePrefix" : {
            "type" : "string",
            "description" : "A title prefix to be used for this person",
            "example" : "drs"
          },
          "titleSuffix" : {
            "type" : "string",
            "description" : "A title suffix to be used for this person",
            "example" : "BSc"
          },
          "office" : {
            "type" : "string",
            "description" : "The name of the office where this person is located"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "ICEName" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "Full name of In Case of Emergency contact",
            "example" : "Janne"
          },
          "ICEPhoneNumber" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "Phone number of In Case of Emergency contact",
            "example" : "+31 623 456 789"
          },
          "ICERelation" : {
            "type" : "string",
            "description" : "Type of relation between person and In Case of Emergency contact",
            "example" : "partner",
            "enum" : [ "partner", "parent", "other" ]
          },
          "languageOfChoice" : {
            "type" : "array",
            "description" : "The language(s) of choice for this person, RFC3066",
            "items" : {
              "type" : "string",
              "example" : "nl-NL"
            }
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "Problem" : {
        "required" : [ "status", "title" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "The HTTP status code",
            "example" : "404"
          },
          "title" : {
            "type" : "string",
            "description" : "A short, human-readable summary of the problem type",
            "example" : "Resource not found"
          },
          "detail" : {
            "type" : "string",
            "description" : "A human-readable explanation specific to this occurrence of the problem"
          }
        }
      },
      "ProgramOfferingAssociation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Association"
        }, {
          "type" : "object",
          "properties" : {
            "result" : {
              "$ref" : "#/components/schemas/ProgramResult"
            }
          }
        } ]
      },
      "ProgramOffering" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Offering"
        }, {
          "required" : [ "endDate", "modeOfStudy", "startDate" ],
          "type" : "object",
          "properties" : {
            "modeOfStudy" : {
              "type" : "string",
              "description" : "Indicate whether the program is full-time, part-time, dual or self-paced.",
              "example" : "full-time",
              "enum" : [ "full-time", "part-time", "dual training", "self-paced" ]
            },
            "startDate" : {
              "type" : "string",
              "description" : "The moment on which this offering starts, RFC3339 (full-date)",
              "format" : "date",
              "example" : "2019-08-21"
            },
            "endDate" : {
              "type" : "string",
              "description" : "The moment on which this offering ends, RFC3339 (full-date)",
              "format" : "date",
              "example" : "2023-06-15"
            }
          }
        } ]
      },
      "AcademicSession" : {
        "required" : [ "academicSessionId", "endDate", "name", "startDate" ],
        "type" : "object",
        "properties" : {
          "academicSessionId" : {
            "type" : "string",
            "description" : "Unique id for this academic session",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-426614174000"
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name of this academic session",
            "example" : "Fall semester 2020"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The day on which this academic session starts, RFC3339 (full-date)",
            "format" : "date",
            "example" : "2020-08-17"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The day on which this academic session ends, RFC3339 (full-date)",
            "format" : "date",
            "example" : "2020-12-18"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "CourseOfferingAssociation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Association"
        }, {
          "type" : "object",
          "properties" : {
            "result" : {
              "$ref" : "#/components/schemas/CourseResult"
            }
          }
        } ]
      },
      "CourseOffering" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Offering"
        }, {
          "required" : [ "endDate", "modeOfStudy", "startDate" ],
          "type" : "object",
          "properties" : {
            "modeOfStudy" : {
              "type" : "string",
              "description" : "Indicate whether the course is full-time, part-time, dual or self-paced.",
              "enum" : [ "full-time", "part-time", "dual training", "self-paced" ]
            },
            "startDate" : {
              "type" : "string",
              "description" : "The moment on which this offering starts, RFC3339 (full-date)",
              "format" : "date"
            },
            "endDate" : {
              "type" : "string",
              "description" : "The moment on which this offering ends, RFC3339 (full-date)",
              "format" : "date"
            }
          }
        } ]
      },
      "ComponentOfferingAssociation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Association"
        }, {
          "type" : "object",
          "properties" : {
            "result" : {
              "$ref" : "#/components/schemas/ComponentResult"
            }
          }
        } ]
      },
      "ComponentOffering" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Offering"
        }, {
          "required" : [ "endDateTime", "startDateTime" ],
          "type" : "object",
          "properties" : {
            "startDateTime" : {
              "type" : "string",
              "description" : "The moment on which this offering starts, RFC3339 (date-time)",
              "format" : "date-time"
            },
            "endDateTime" : {
              "type" : "string",
              "description" : "The moment on which this offering ends, RFC3339 (date-time)",
              "format" : "date-time"
            },
            "resultWeight" : {
              "maximum" : 100,
              "minimum" : 0,
              "type" : "integer",
              "description" : "The result weight of this offering",
              "example" : 100
            },
            "room" : {
              "$ref" : "#/components/schemas/Room"
            }
          }
        } ]
      },
      "Organization" : {
        "required" : [ "name", "organizationId", "shortName", "type" ],
        "type" : "object",
        "properties" : {
          "organizationId" : {
            "type" : "string",
            "description" : "Unique id of this organization",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-123514174000"
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name of the organization",
            "example" : "Coöperatie SURF U.A."
          },
          "shortName" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "Short name of the organization",
            "example" : "SURF"
          },
          "description" : {
            "type" : "string",
            "description" : "Any general description of the organization should clearly mention the type of higher education organization, especially in the case of a binary system. In Dutch; universiteit (university) or hogeschool (university of applied sciences).",
            "example" : "SURF is een coöperatieve vereniging van Nederlandse onderwijs- en onderzoeksinstellingen waarin de leden hun krachten bundelen. De leden zijn eigenaar van SURF."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of this organization",
            "example" : "root",
            "enum" : [ "root", "institution", "department", "faculty" ]
          },
          "addresses" : {
            "type" : "array",
            "description" : "Addresses of this organization",
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "link" : {
            "maxLength" : 2048,
            "type" : "string",
            "description" : "URL of the organization's website",
            "format" : "uri",
            "example" : "https://surf.nl"
          },
          "logo" : {
            "maxLength" : 2048,
            "type" : "string",
            "description" : "Logo of this organization",
            "format" : "uri",
            "example" : "https://www.surf.nl/themes/surf/logo.svg"
          },
          "brin" : {
            "type" : "string",
            "description" : "BRIN-code of this organization\n-00BX (BRIN-nummer instelling)\n-26ED00 (BRIN-nummer vestiging)\n-10305 (nummer Bevoegd Gezag)\n-641 (nummer Administratie Kantoor)\n",
            "example" : "00AA"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "OrganizationExpanded" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Organization"
        }, {
          "type" : "object",
          "properties" : {
            "parent" : {
              "$ref" : "#/components/schemas/Organization"
            },
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Organization"
              }
            }
          },
          "description" : "These properties are only present when explicitly included"
        } ]
      },
      "Program" : {
        "required" : [ "abbreviation", "description", "name", "programId", "type" ],
        "type" : "object",
        "properties" : {
          "programId" : {
            "type" : "string",
            "description" : "Unique id for this program",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-426614174000"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of this program",
            "example" : "alliance",
            "enum" : [ "program", "minor", "honours", "specialization", "elective", "module", "track", "joint-degree", "alliance" ]
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name of this program",
            "example" : "Student Mobility"
          },
          "abbreviation" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The abbreviation of this program",
            "example" : "studM"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of this program",
            "example" : "program that is a place holder for all courses that are made available for student mobility"
          },
          "ects" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "The number of Euopean Credits that can be archieved in this program",
            "example" : 5
          },
          "qualificationAwarded" : {
            "type" : "string",
            "description" : "Type of qualificaton that can be obtained on finishing the program",
            "example" : "None",
            "enum" : [ "AD", "BA", "BSc", "LLB", "MA", "MSc", "LLM", "Phd", "None" ]
          },
          "lengthOfProgram" : {
            "type" : "integer",
            "description" : "The duration of this program in months",
            "example" : 6
          },
          "levelOfQualification" : {
            "type" : "string",
            "description" : "Level of qualification according to the National Qualification Framework and the European Qualifications Framework",
            "example" : "6",
            "enum" : [ "1", "2", "3", "4", "4+", "5", "6", "7", "8" ]
          },
          "sector" : {
            "type" : "string",
            "description" : "The sector for this program",
            "example" : "university education",
            "enum" : [ "secondary vocational education", "higher professional education", "university education" ]
          },
          "fieldsOfStudy" : {
            "maxLength" : 4,
            "type" : "string",
            "description" : "Field(s) of study (e.g. ISCED-F) (http://uis.unesco.org/sites/default/files/documents/isced-fields-of-education-and-training-2013-en.pdf.",
            "example" : "0732"
          },
          "crohoCreboCode" : {
            "type" : "string",
            "description" : "CrohoCode in wo/hbo or creboCode in mbo",
            "example" : "59312"
          },
          "profileOfProgram" : {
            "type" : "string",
            "description" : "Brief description of the main focus of the program.",
            "example" : "the program is meant to be a place holder for all courses that can be exchanged between Universities, therefore there is no main focus for this program"
          },
          "learningOutcomes" : {
            "type" : "array",
            "description" : "List of learning outcomes at program level. It is advisable to limit the number of learning outcomes to approximately 20. It is also advisable to make sure that the program learning outcomes in the course catalogue correspond with those on the Diploma Supplement.",
            "items" : {
              "type" : "string"
            }
          },
          "admissionRequirements" : {
            "type" : "string",
            "description" : "This information may be given at an institutional level and/or at the level of individual programmes. Make sure that it is clear whether the information applies to fee-paying students (national and/or international) or to exchange students.",
            "example" : "Students need to be enrolled at qualifying institutions of higher education that participate in this alliance"
          },
          "qualificationRequirements" : {
            "type" : "string",
            "description" : "Normally, students will receive a diploma when they have completed the (official) study program and have obtained the required number of credits. If there are any other specific requirements that students need to have fulfilled, mention them here.",
            "example" : "None"
          },
          "link" : {
            "maxLength" : 2048,
            "type" : "string",
            "description" : "URL of the program's website",
            "format" : "uri",
            "example" : "https://bijvak.nl"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "Course" : {
        "required" : [ "abbreviation", "courseId", "description", "level", "name" ],
        "type" : "object",
        "properties" : {
          "courseId" : {
            "type" : "string",
            "description" : "Unique id of this course",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-426614174000"
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name of this course (ECTS-title)",
            "example" : "Academic and Professional Writing"
          },
          "abbreviation" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The abbreviation or internal code used to identify this course (ECTS-code)",
            "example" : "INFOMQNM"
          },
          "ects" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "The number of EC's that is earned when the course is completed successfully (ECTS-ects)",
            "example" : 7.5
          },
          "description" : {
            "type" : "string",
            "description" : "The description of this course (ECTS-description)",
            "example" : "As with all empirical sciences, to assure valid outcomes, HCI studies heavily rely on research methods and statistics. This holds for the design of user interfaces, personalized recommender systems, and interaction paradigms for the internet of things. This course prepares you to do so by learning you to collect data, design experiments, and analyze the results. By the end of the course, you will have a detailed understanding of how to select and apply quantitative research methods and analysis to address virtually all HCI challenges. Quantitative research and data analysis will be taught in the context of state-of-the-art HCI challenges. Lectures will be alternated with hands-on learning, including work with predefined datasets (e.g., addressing facial features, cognitive load, and emotion). Additionally, students will set up their own research (e.g., using eye tracking). Data processing and analysis will be executed using R."
          },
          "learningOutcomes" : {
            "type" : "array",
            "description" : "Statements that describe the knowledge or skills students should acquire by the end of a particular course (ECTS-learningoutcome)",
            "example" : [ "Executable knowledge of research methods, including: Acquire knowledge of HCI research paradigms Able to design suitable research studies (e.g., choose between within and between subject designs) Define/apply/design metrics and scales Define/produce materials (e.g., stimuli and questionnaires) Define protocols for research studies Understands and take in account concepts of reliability and validity Analyze and improve methods and analysis of published scientific articles Able to deliver scientific reports", " Executable knowledge of ­­­statistics, including: Handle hypothesis testing with complex designs (e.g., including , dependent, independent, and co variates) Data preparation (e.g., coding and feature selection) Reason towards adequate techniques to ensure valid outcomes (e.g., be aware of type I, type II errors) Select an appropriate sampling method (e.g., stratified) Perform parametric tests (e.g., repeated measures (M)ANOVA) Perform non-parametric tests (e.g., Chi-square, Mann-Whitney, and Kruskal-Wallis)" ],
            "items" : {
              "type" : "string"
            }
          },
          "requirements" : {
            "type" : "string",
            "description" : "The requirements needed to enter this course (ECTS-prerequisites)",
            "example" : "None"
          },
          "level" : {
            "type" : "string",
            "description" : "The level of this course (ECTS-year of study if applicable)",
            "example" : "master",
            "enum" : [ "secondary vocational education 3", "secondary vocational education 4", "associate degree", "bachelor", "master", "doctoral" ]
          },
          "modeOfDelivery" : {
            "type" : "array",
            "description" : "The mode of delivery of the component (ECTS-mode of delivery)",
            "items" : {
              "type" : "string",
              "example" : "situated",
              "enum" : [ "distance-learning", "on campus", "online", "hybrid", "situated" ]
            }
          },
          "enrollment" : {
            "type" : "string",
            "description" : "The extra information that is provided for enrollment",
            "example" : "enrollment through SIS"
          },
          "resources" : {
            "type" : "array",
            "description" : "An overview of the literature and other resources that is used in this course (ECTS-recommended reading and other sources)",
            "example" : [ "book to be announced", "on-line resource x" ],
            "items" : {
              "type" : "string"
            }
          },
          "assessment" : {
            "type" : "string",
            "description" : "A description of the way exams for this course are taken (ECTS-assessment method and criteria)",
            "example" : "Exam on campus"
          },
          "link" : {
            "maxLength" : 2048,
            "type" : "string",
            "description" : "URL of the course's website",
            "format" : "uri",
            "example" : "https://osiris.uu.nl/osiris_student_uuprd/OnderwijsCatalogusZoekCursus.do#submitForm?cursuscode=INFOMQNM"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "Component" : {
        "required" : [ "abbreviation", "componentId", "name", "type" ],
        "type" : "object",
        "properties" : {
          "componentId" : {
            "type" : "string",
            "description" : "Unique id of this component",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-426614174000"
          },
          "type" : {
            "type" : "string",
            "description" : "The component type",
            "example" : "test",
            "enum" : [ "test", "lecture", "practical", "tutorial", "consultation", "project", "workshop", "excursion", "independent study", "external", "skills training" ]
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name of this component",
            "example" : "Written test for INFOMQNM"
          },
          "abbreviation" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The abbreviation of this component",
            "example" : "Test-INFOMQNM"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of this component",
            "example" : "Prove executable knowledge of research methods, including: Acquire knowledge of HCI research paradigms Able to design suitable research studies (e.g., choose between within and between subject designs) Define/apply/design metrics and scales Define/produce materials (e.g., stimuli and questionnaires) Define protocols for research studies Understands and take in account concepts of reliability and validity Analyze and improve methods and analysis of published scientific articles Able to deliver scientific reports\nProve executable knowledge of ­­­statistics, including: Handle hypothesis testing with complex designs (e.g., including , dependent, independent, and co variates) Data preparation (e.g., coding and feature selection) Reason towards adequate techniques to ensure valid outcomes (e.g., be aware of type I, type II errors) Select an appropriate sampling method (e.g., stratified) Perform parametric tests (e.g., repeated measures (M)ANOVA) Perform non-parametric tests (e.g., Chi-square, Mann-Whitney, and Kruskal-Wallis)"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "AcademicSessionExpanded" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/AcademicSession"
        }, {
          "type" : "object",
          "properties" : {
            "parent" : {
              "$ref" : "#/components/schemas/AcademicSession"
            },
            "year" : {
              "$ref" : "#/components/schemas/AcademicSession"
            }
          }
        } ]
      },
      "ProgramExpanded" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Program"
        }, {
          "type" : "object",
          "properties" : {
            "parent" : {
              "$ref" : "#/components/schemas/Program"
            },
            "children" : {
              "type" : "array",
              "description" : "Programs which are a part of this program (e.g specializations)",
              "items" : {
                "$ref" : "#/components/schemas/Program"
              }
            },
            "organization" : {
              "$ref" : "#/components/schemas/Organization"
            }
          },
          "description" : "These properties are only present when explicitly included. This allows for creating and displaying strutures of programs"
        } ]
      },
      "CourseExpanded" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Course"
        }, {
          "type" : "object",
          "properties" : {
            "programs" : {
              "type" : "array",
              "description" : "The program of which this course is a part of",
              "items" : {
                "$ref" : "#/components/schemas/Program"
              }
            },
            "coordinators" : {
              "type" : "array",
              "description" : "The person(s) responsible for this course",
              "items" : {
                "$ref" : "#/components/schemas/Person"
              }
            },
            "organization" : {
              "$ref" : "#/components/schemas/Organization"
            }
          },
          "description" : "These properties are only present when explicitly included"
        } ]
      },
      "ComponentExpanded" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Component"
        }, {
          "type" : "object",
          "properties" : {
            "course" : {
              "$ref" : "#/components/schemas/Course"
            },
            "organization" : {
              "$ref" : "#/components/schemas/Organization"
            }
          },
          "description" : "These properties are only present when explicitly included"
        } ]
      },
      "ProgramOfferingExpanded" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProgramOffering"
        }, {
          "type" : "object",
          "properties" : {
            "program" : {
              "$ref" : "#/components/schemas/Program"
            },
            "organization" : {
              "$ref" : "#/components/schemas/Organization"
            },
            "academicSession" : {
              "$ref" : "#/components/schemas/AcademicSession"
            }
          },
          "description" : "These properties are only present when explicitly included"
        } ]
      },
      "CourseOfferingExpanded" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CourseOffering"
        }, {
          "type" : "object",
          "properties" : {
            "course" : {
              "$ref" : "#/components/schemas/Course"
            },
            "programOffering" : {
              "$ref" : "#/components/schemas/ProgramOffering"
            },
            "organization" : {
              "$ref" : "#/components/schemas/Organization"
            },
            "academicSession" : {
              "$ref" : "#/components/schemas/AcademicSession"
            }
          },
          "description" : "These properties are only present when explicitly included"
        } ]
      },
      "ComponentOfferingExpanded" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ComponentOffering"
        }, {
          "type" : "object",
          "properties" : {
            "component" : {
              "$ref" : "#/components/schemas/Component"
            },
            "courseOffering" : {
              "$ref" : "#/components/schemas/CourseOffering"
            },
            "organization" : {
              "$ref" : "#/components/schemas/Organization"
            },
            "academicSession" : {
              "$ref" : "#/components/schemas/AcademicSession"
            }
          },
          "description" : "These properties are only present when explicitly included"
        } ]
      },
      "AssociationExpanded" : {
        "allOf" : [ {
          "oneOf" : [ {
            "$ref" : "#/components/schemas/ProgramOfferingAssociation"
          }, {
            "$ref" : "#/components/schemas/CourseOfferingAssociation"
          }, {
            "$ref" : "#/components/schemas/ComponentOfferingAssociation"
          } ]
        }, {
          "type" : "object",
          "properties" : {
            "persons" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Person"
              }
            },
            "offering" : {
              "$ref" : "#/components/schemas/Offering"
            }
          },
          "description" : "These properties are only present when explicitly included"
        } ]
      },
      "Building" : {
        "required" : [ "address", "buildingId", "name" ],
        "type" : "object",
        "properties" : {
          "buildingId" : {
            "type" : "string",
            "description" : "Unique id of this building",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-331214174000"
          },
          "abbreviation" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The abbreviation of the name of this building",
            "example" : "Bb"
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name of this building",
            "example" : "Beatrix building"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of this building",
            "example" : "external rooms location for exams"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "Room" : {
        "required" : [ "name", "roomId", "type" ],
        "type" : "object",
        "properties" : {
          "roomId" : {
            "type" : "string",
            "description" : "Unique id for this room",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-332114174000"
          },
          "abbreviation" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The abbreviation of the name of this room",
            "example" : "Bb 4.54"
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name of this room",
            "example" : "Beatrix building room 4.54"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of this room",
            "example" : "exam location",
            "enum" : [ "general purpose", "lecture room", "computer room", "laboratory", "office", "workspace", "exam location", "study room", "examination room", "conference room" ]
          },
          "description" : {
            "type" : "string",
            "description" : "The description of this room",
            "example" : "External education and exam room 4.54"
          },
          "totalSeats" : {
            "type" : "integer",
            "description" : "The total number of seats located in the room",
            "format" : "int32",
            "example" : 300
          },
          "availableSeats" : {
            "type" : "integer",
            "description" : "The total number of available (=non-reserved) seats in the room",
            "format" : "int32",
            "example" : 200
          },
          "floor" : {
            "type" : "string",
            "description" : "The floor on which this room is located",
            "example" : "4"
          },
          "wing" : {
            "type" : "string",
            "description" : "The wing in which this room is located",
            "example" : "None"
          },
          "geolocation" : {
            "$ref" : "#/components/schemas/Room_geolocation"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "RoomExpanded" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Room"
        }, {
          "type" : "object",
          "properties" : {
            "building" : {
              "$ref" : "#/components/schemas/Building"
            }
          },
          "description" : "These properties are only present when explicitly included."
        } ]
      },
      "NewsFeed" : {
        "required" : [ "description", "name", "newsFeedId", "type" ],
        "type" : "object",
        "properties" : {
          "newsFeedId" : {
            "type" : "string",
            "description" : "Unique id for this news feed",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-134564174222"
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name for this news feed",
            "example" : "room Bb 4.35 news"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of this news feed",
            "example" : "all information on what happens in room Bb 4.35"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the object this news feed relates to",
            "example" : "room",
            "enum" : [ "organization", "program", "course", "component", "person", "building", "room" ]
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "NewsItem" : {
        "required" : [ "name", "newsItemId" ],
        "type" : "object",
        "properties" : {
          "newsItemId" : {
            "type" : "string",
            "description" : "Unique id for this news item",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-122564174000"
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name for this news item",
            "example" : "Room Bb 4.35 will be un available from 2020-09-29 until 2020-09-30"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of this news item",
            "enum" : [ "calamity", "general", "schedule-change", "announcement" ]
          },
          "authors" : {
            "type" : "array",
            "description" : "The authors of the article with this news item",
            "example" : [ "admin@universiteitvanharderwijk.nl" ],
            "items" : {
              "maxLength" : 256,
              "type" : "string"
            }
          },
          "image" : {
            "maxLength" : 2048,
            "type" : "string",
            "description" : "The url containing the address of the image belonging to this news item",
            "format" : "uri",
            "example" : "https://upload.wikimedia.org/wikipedia/commons/4/44/Antu_emblem-unavailable.svg"
          },
          "link" : {
            "maxLength" : 2048,
            "type" : "string",
            "description" : "The url containing the address of the article belonging to this news item",
            "format" : "uri",
            "example" : "https://www.universiteitvanharderwijk.nl/cms/ruimtegebrek"
          },
          "content" : {
            "type" : "string",
            "description" : "The content of this news item",
            "example" : "The room Bb 4.35 will be under maintenance"
          },
          "validFrom" : {
            "type" : "string",
            "description" : "The moment from which this news item is valid, RFC3339 (date-time)",
            "format" : "date-time",
            "example" : "2020-09-28T08:30:00Z"
          },
          "validUntil" : {
            "type" : "string",
            "description" : "The moment until which this news item is valid, RFC3339 (date-time)",
            "format" : "date-time",
            "example" : "2020-09-30T20:00:00Z"
          },
          "lastModified" : {
            "type" : "string",
            "description" : "The moment on which this news item was updated, RFC3339 (date-time)",
            "format" : "date-time",
            "example" : "2020-09-28T00:00:00Z"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "Ext" : {
        "type" : "object",
        "description" : "Object for additional non-standard attributes"
      },
      "Address" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Address type",
            "enum" : [ "postal", "visit", "deliveries" ]
          },
          "street" : {
            "type" : "string",
            "description" : "The street name",
            "example" : "Moreelsepark"
          },
          "streetNumber" : {
            "type" : "string",
            "description" : "The street number",
            "example" : "48"
          },
          "additional" : {
            "type" : "string",
            "description" : "Further details like building name, suite, apartment number, etc.",
            "example" : "On the other side of the road"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "Postal code",
            "example" : "3511 EP"
          },
          "city" : {
            "type" : "string",
            "description" : "name of the city / locality",
            "example" : "Utrecht"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "the country code according to [iso-3166-1-alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)",
            "example" : "NL"
          },
          "geolocation" : {
            "$ref" : "#/components/schemas/Address_geolocation"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        },
        "description" : "The full street address"
      },
      "Association" : {
        "required" : [ "associationId", "role", "state", "type" ],
        "type" : "object",
        "properties" : {
          "associationId" : {
            "type" : "string",
            "description" : "Unique id of this association",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a457-237891417400"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of this association",
            "example" : "componentOfferingAssociation",
            "enum" : [ "programOfferingAssociation", "courseOfferingAssociation", "componentOfferingAssociation" ]
          },
          "role" : {
            "type" : "string",
            "description" : "The role of this person associated with the offering",
            "example" : "student",
            "enum" : [ "student", "lecturer", "teaching assistant", "coordinator", "guest" ]
          },
          "state" : {
            "type" : "string",
            "description" : "The state of this association",
            "example" : "associated",
            "enum" : [ "pending", "canceled", "denied", "associated" ]
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "ProgramResult" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Result"
        }, {
          "required" : [ "ects" ],
          "type" : "object",
          "properties" : {
            "ects" : {
              "minimum" : 0,
              "type" : "number",
              "description" : "The number of EC's that have been earned to the current moment",
              "example" : 15
            }
          }
        } ]
      },
      "Offering" : {
        "required" : [ "academicSession", "description", "isLineItem", "mainLanguage", "name", "offeringId", "type" ],
        "type" : "object",
        "properties" : {
          "offeringId" : {
            "type" : "string",
            "description" : "Unique id of this offering",
            "format" : "uuid",
            "example" : "123e4567-e89b-12d3-a456-134564174000"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of this offering",
            "example" : "component",
            "enum" : [ "program", "course", "component" ]
          },
          "academicSession" : {
            "$ref" : "#/components/schemas/AcademicSession"
          },
          "name" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The name of this offering",
            "example" : "Final written test for INFOMQNM for fall semseter 2020"
          },
          "abbreviation" : {
            "maxLength" : 256,
            "type" : "string",
            "description" : "The abbreviation or internal code used to identify this offering",
            "example" : "Test-INFOMQNM-20FS"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of this offering",
            "example" : "Prove in wirting knowledge of research methods, including: Acquire knowledge of HCI research paradigms Able to design suitable research studies (e.g., choose between within and between subject designs) Define/apply/design metrics and scales Define/produce materials (e.g., stimuli and questionnaires) Define protocols for research studies Understands and take in account concepts of reliability and validity Analyze and improve methods and analysis of published scientific articles Able to deliver scientific reports Prove in writing knowledge of ­­­statistics, including: Handle hypothesis testing with complex designs (e.g., including , dependent, independent, and co variates) Data preparation (e.g., coding and feature selection) Reason towards adequate techniques to ensure valid outcomes (e.g., be aware of type I, type II errors) Select an appropriate sampling method (e.g., stratified) Perform parametric tests (e.g., repeated measures (M)ANOVA) Perform non-parametric tests (e.g., Chi-square, Mann-Whitney, and Kruskal-Wallis)"
          },
          "mainLanguage" : {
            "type" : "string",
            "description" : "The main language in which the courses within this program are given, RFC3066",
            "example" : "nl-NL"
          },
          "maxNumberStudents" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "The maximum number of students allowed to enroll for this offering",
            "format" : "int32",
            "example" : 200
          },
          "enrolledNumberStudents" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "The number of students that have already enrolled for this offering",
            "format" : "int32",
            "example" : 150
          },
          "pendingNumberStudents" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "The number of students that have a pending enrollment request for this offering",
            "format" : "int32",
            "example" : 50
          },
          "isLineItem" : {
            "type" : "boolean",
            "description" : "Whether the offering is a line item or not"
          },
          "resultValueType" : {
            "type" : "string",
            "description" : "The result value type for this offering",
            "example" : "10",
            "enum" : [ "pass-or-fail", "US letter", "UK letter", "0-100", "1-10" ]
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "CourseResult" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Result"
        }, {
          "required" : [ "ects" ],
          "type" : "object",
          "properties" : {
            "ects" : {
              "minimum" : 0,
              "type" : "number",
              "description" : "The number of EC's that is earned",
              "example" : 7.5
            }
          }
        } ]
      },
      "ComponentResult" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Result"
        }, {
          "required" : [ "weight" ],
          "type" : "object",
          "properties" : {
            "weight" : {
              "maximum" : 100,
              "minimum" : 0,
              "type" : "integer",
              "description" : "The weight to 100 as total for this offering in the course",
              "format" : "int32",
              "example" : 100
            }
          }
        } ]
      },
      "Result" : {
        "required" : [ "resultDate", "state" ],
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "string",
            "description" : "The state of this result",
            "example" : "completed",
            "enum" : [ "in progress", "postponed", "completed" ]
          },
          "comment" : {
            "type" : "string",
            "description" : "The comment on this result",
            "example" : "None"
          },
          "score" : {
            "type" : "string",
            "description" : "The score of this program/course/component association (based on resultValueType in offering)",
            "example" : "9"
          },
          "resultDate" : {
            "type" : "string",
            "description" : "The date this result has been published, RFC3339 (full-date)",
            "format" : "date",
            "example" : "2020-09-28"
          },
          "ext" : {
            "$ref" : "#/components/schemas/Ext"
          }
        }
      },
      "inline_response_200" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Person"
            }
          }
        }
      },
      "inline_response_200_1" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/ProgramOfferingAssociation"
                }, {
                  "required" : [ "offering" ],
                  "type" : "object",
                  "properties" : {
                    "offering" : {
                      "$ref" : "#/components/schemas/ProgramOffering"
                    },
                    "academicSession" : {
                      "$ref" : "#/components/schemas/AcademicSession"
                    }
                  }
                } ]
              }, {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/CourseOfferingAssociation"
                }, {
                  "required" : [ "offering" ],
                  "type" : "object",
                  "properties" : {
                    "offering" : {
                      "$ref" : "#/components/schemas/CourseOffering"
                    },
                    "academicSession" : {
                      "$ref" : "#/components/schemas/AcademicSession"
                    }
                  }
                } ]
              }, {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/ComponentOfferingAssociation"
                }, {
                  "required" : [ "offering" ],
                  "type" : "object",
                  "properties" : {
                    "offering" : {
                      "$ref" : "#/components/schemas/ComponentOffering"
                    },
                    "academicSession" : {
                      "$ref" : "#/components/schemas/AcademicSession"
                    }
                  }
                } ]
              } ]
            }
          }
        }
      },
      "inline_response_200_2" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Organization"
            }
          }
        }
      },
      "inline_response_200_3" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Program"
            }
          }
        }
      },
      "inline_response_200_4" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Course"
            }
          }
        }
      },
      "inline_response_200_5" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Component"
            }
          }
        }
      },
      "inline_response_200_6" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/ProgramOffering"
              }, {
                "$ref" : "#/components/schemas/CourseOffering"
              }, {
                "$ref" : "#/components/schemas/ComponentOffering"
              } ]
            }
          }
        }
      },
      "inline_response_200_7" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AcademicSession"
            }
          }
        }
      },
      "inline_response_200_8" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProgramOffering"
            }
          }
        }
      },
      "inline_response_200_9" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CourseOffering"
            }
          }
        }
      },
      "inline_response_200_10" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ComponentOffering"
            }
          }
        }
      },
      "inline_response_200_11" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/ProgramOfferingExpanded"
        }, {
          "$ref" : "#/components/schemas/CourseOfferingExpanded"
        }, {
          "$ref" : "#/components/schemas/ComponentOfferingExpanded"
        } ]
      },
      "inline_response_200_12" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "allOf" : [ {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ProgramOfferingAssociation"
                }, {
                  "$ref" : "#/components/schemas/CourseOfferingAssociation"
                }, {
                  "$ref" : "#/components/schemas/ComponentOfferingAssociation"
                } ]
              }, {
                "required" : [ "person" ],
                "type" : "object",
                "properties" : {
                  "person" : {
                    "$ref" : "#/components/schemas/Person"
                  },
                  "academicSession" : {
                    "$ref" : "#/components/schemas/AcademicSession"
                  }
                }
              } ]
            }
          }
        }
      },
      "inline_response_200_13" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Building"
            }
          }
        }
      },
      "inline_response_200_14" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Room"
            }
          }
        }
      },
      "inline_response_200_15" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NewsFeed"
            }
          }
        }
      },
      "inline_response_200_16" : {
        "required" : [ "items", "pageNumber", "pageSize" ],
        "type" : "object",
        "properties" : {
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of items per page",
            "format" : "int32"
          },
          "pageNumber" : {
            "type" : "integer",
            "description" : "The current page number",
            "format" : "int32"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NewsItem"
            }
          }
        }
      },
      "Room_geolocation" : {
        "required" : [ "latitude", "longitude" ],
        "type" : "object",
        "properties" : {
          "latitude" : {
            "type" : "number",
            "format" : "double",
            "example" : 52.088255
          },
          "longitude" : {
            "type" : "number",
            "format" : "double",
            "example" : 5.106669
          }
        },
        "description" : "Geolocation of the entrance of this room (WGS84 coordinate reference system)"
      },
      "Address_geolocation" : {
        "required" : [ "latitude", "longitude" ],
        "type" : "object",
        "properties" : {
          "latitude" : {
            "type" : "number",
            "format" : "double",
            "example" : 52.089123
          },
          "longitude" : {
            "type" : "number",
            "format" : "double",
            "example" : 5.113337
          }
        },
        "description" : "Geolocation of the entrance of this address (WGS84 coordinate reference system)"
      }
    }
  }
}