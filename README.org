#+TITLE:  Surf OOAPI Gateway

* Status

  Master branch status: [[https://github.com/persistent-services/surf-ooapi-gateway/workflows/npm-test/badge.svg]]

* Running tests
** Functional tests

   Run all tests with:

   #+begin_src sh
     npm test
   #+end_src

   Run all tests and see docker output:

   #+begin_src sh
     DEBUG='testcontainers*' npm test
   #+end_src

   Run all but the integration tests with:

   #+begin_src sh
     MOCHA_SKIP=integration npm test
   #+end_src

   For development and tests the default gateway configuration points
   at two test backends.  These can be started locally with:

   #+begin_src sh
     npm run test-backend &
     npm run other-test-backend &
   #+end_src

** Performance/stress tests

   The performance test scripts use [[https://httpd.apache.org/docs/2.4/programs/ab.html][apachebench]], so make sure ~ab~
   is installed on your PATH.

   On MacOs it may already be available at ~/usr/sbin/ab~

   On debian:
   #+begin_src sh
     apt-get install apache2-utils
   #+end_src

   To run the tests do

   #+begin_src sh
   ./scripts/perf-test.js --verbose=2
   #+end_src

   This will attempt to run 1000 requests, first sequentially, and
   then with increasing concurrency (up to 250 concurrent requests).

   So see the available options do
   #+begin_src sh
   ./scripts/perf-test.js --help
   #+end_src
* Security

  See [[file:doc/security.org][doc/security.org]] on the strategies we use to keep the gateway
  secure.

** Client authentication

   Use the [[./bin/credentials]] command line tool to create
   client credentials in the correct encoding.

   #+begin_src sh
     ./bin/credentials create myapp
   #+end_src

   Will output something like

   #+begin_example
   Config entry:
	myapp: {
          "passwordSalt":"f2c6d54c0aa39cde114702920b84a753",
           "passwordHash":"eaaeaf91f8e5df9daa88c6980d057eb980757632ebea33b4c2060fef33a31ba2"
        }

   Basic Auth token:
	myapp:64be12c92c1d49ba12d5279e3b444705
   #+end_example

   You will then need to update the [[./config/gateway.config.yml]] file
   and put the given config entry in the ~gatekeeper~ ~apps~ section
   to be used with basic authentication.  In the following example
   ~myapp~ is the username part and ~0123456789abcdef0123456789abcdef~
   is the password.

   #+begin_example
     myapp:0123456789abcdef0123456789abcdef
   #+end_example

   Please note: only a hash of the password is stored, the password
   itself is not stored.

** Client authorization
   <<client-auth>>

   To determine which app can access which paths on which endpoints a
   collection of ACLs is configured on the ~gatekeeper~ policy in
   [[./config/gateway.config.yml]].

   Per app the accessible endpoints are listed and the paths on that
   endpoint.  The paths are formatted as path expressions like
   ~/user/:name~ where ~:name~ is a variable path component.

   In the following example, the app named ~fred~ has access to the
   endpoints ~wilma~ and ~betty~.  On ~wilma~ it can access ~/~ and
   any "dinner" resource like ~/dinner/tonight~ or ~/dinner/tomorrow~
   but not ~/dinner~.  It can also access ~/visits~ on the ~betty~
   endpoint but nothing else.

   #+begin_src yaml
      - gatekeeper:
          - action:
              acls:
                - app: fred
                  endpoints:
                  - endpoint: wilma
                    paths: ['/', '/dinner/:date']
                  - endpoint: betty
                    paths: ['/visits']
   #+end_src

   The endpoint(s) an application tries to access is derived from the
   ~X-Route~ header.  The ~gatekeeper~ policy expects this header to
   have a directive which starts with ~endpoint=~ followed by a comma
   separated list of endpoint identifiers.  The endpoint identifiers
   may only contain alphanumeric characters.

   In the following example access to both ~wilma~ and ~betty~ is
   requested.

   #+begin_example
     X-Route: endpoint=wilma,betty
   #+end_example

   Only the ~endpoint~ directive is supported at this point, any value
   for the ~X-Route~ header not starting with ~endpoint=~ is ignored.

** Server authentication

*** Basic authentication

    Service endpoints can be secured using basic authentication by
    adding ~proxyOptions.auth~ options.  Here's an example:

    #+begin_src yaml
      serviceEndpoints:
        BoulderCollege:
          url: https://bould-college.co/ooapi/
          proxyOptions:
            auth: fred:wilma
    #+end_src

*** OAuth2 Client Credentials

    Service endpoints can be secured using the OAuth2 client
    credentials grant type [fn:oauth2-ccg:See also RFC 6749 section
    4.4].  Here's an example:

    #+begin_src yaml
      serviceEndpoints:
        BoulderCollege:
          url: https://bould-college.co/ooapi/
          proxyOptions:
            oauth2:
              clientCredentials:
                tokenEndpoint:
                  url: https://college-oauth.co/token
                  params:
                    grant_type: client_credentials
                    client_id: fred
                    client_secret: wilma
    #+end_src

    Notes:

    - ~params~ are the /exact/ request parameters for the token
      endpoint, this is also the location to add ~scope~ when needed

    - only passing credentials through ~params~ is supported at this
      time although RFC mentions basic
      authentication[fn:oauth2-ccg-atr:See also RFC 6749 section
      4.4.2].

*** Special API key headers

    Service endpoints depending on special API key headers to
    authorize use can be configured through ~proxyOptions.headers~.
    In the following example a "Authorization" is expected with a
    bearer token:

    #+begin_src yaml
      serviceEndpoints:
        BoulderCollege:
          url: https://bould-college.co/ooapi/
          proxyOptions:
            headers:
              Authorization: "Bearer <myverysecrettoken>"
    #+end_src

    Note: any header can be added here.

* Configuration

** Logging

   Request logging is implemented using the standard [[https://www.express-gateway.io/docs/policies/log/][EG log policy]] in
   [[./config/gateway.config.yml]]

   #+begin_src yaml
      - log:
          - action:
              message: ${req.egContext.requestID} ${req.method} ${req.originalUrl}
   #+end_src

** Rate limiting

   Rate limiting is implemented using the standard [[https://www.express-gateway.io/docs/policies/rate-limiter/][EG rate limiter
   policy]] in  [[./config/gateway.config.yml]]

   A very aggressive example is

   #+begin_src yaml
      - rate-limit:
          - action:
              max: 10
              windowMs: 1000
              delayAfter: 5
              delayMs: 1000
   #+end_src

   This sample configuration limits requests to 10 per second per IP
   address, and will start delaying requests for a second when more
   than 5 requests arrive per windowMs.

   Note that the defaults for ~delayAfter~ and ~delayMs~ are 1 and
   1000, respectively, so *you should always provide your own values
   for delayAfter and delayMs* if you want to have reasonable request
   rates.

** TLS

*** Setting server certificates

    To serve https requests, you need to specify your private key and
    the signed certificate as follows

    #+begin_src yaml
      https:
        port: 4444
        tls:
          default: # replace with real certificate in prod environment
            key: "config/testServer.key"
            cert: "config/testServer.crt"
    #+end_src

*** Generating self-signed certificates

    The integration tests allow self-signed certificates, which you
    can generate as follows:

    #+begin_src sh
      # create root certificate authority for signing our own certs
      cd config
      openssl genrsa -out testRootCA.key 2048
      openssl req -x509 -new -nodes -key testRootCA.key -sha256 -days 1024 -out testRootCA.pem

      # create server certificate
      openssl req -nodes -newkey rsa:2048 -keyout testServer.key -out testServer.csr
      openssl x509 -req -days 365 -in testServer.csr -CA testRootCA.pem -CAkey testRootCA.key -set_serial 01 -out testServer.crt
    #+end_src

** Request/response validation

   Requests and responses can be validated against the [[./ooapiv4.json][OOAPI
   specification]] using the ~openapi-validator~ policy.

   #+begin_src yaml
     - openapi-validator:
        - action:
            apiSpec: 'ooapiv4.json'
            validateRequests: true
            validateResponses: true
   #+end_src

   When ~validateRequests~ is ~true~, all incoming requests are
   validated.

   When ~validateResponses~ is ~true~, responses are validated when
   the request has an ~X-Validate-Response: true~ header.

** Aggregation

   The ~aggregation~ policy will send requests to a number of
   endpoints in parallel and return an envelope containing the
   individual responses.

   The endpoints are determined by the the ~X-Route~ header, which
   contains a list of ~serviceEndpoint~ identifiers. If no ~X-Route~
   header is provided, all enabled endpoints in the client's ACL are
   used.

   #+begin_example
   X-Route: endpoint=tue,wur
   #+end_example

   See also [[client-auth][Client Authorization]].

** Aggregation and response validation

   When responses from multiple backends are aggregated, they are
   wrapped in an envelope.

   Aggregation has the following config options

*** ~noEnvelopIfAnyHeaders~

   #+begin_src yaml
     - aggregation:
         - action:
             noEnvelopIfAnyHeaders:
               'X-Validate-Response': 'true'
   #+end_src

   Since aggregated responses are never valid against the OOAPI spec,
   the gateway will not aggregate when ~X-Validate-Response: true~ is
   specified. In this case, the request must specify an ~X-Route~
   header with exactly one backend, or a ~BAD REQUEST~ response is
   returned.

*** ~keepRequestHeaders~

   #+begin_src yaml
     - aggregation:
         - action:
             keepRequestHeaders:
               - 'accept'
               - 'accept-language'
   #+end_src

   When keepRequestHeaders is specified it lists all headers from the
   client that will be forwarded to the backends.

   If keepRequestHeaders is not specified all headers will be
   forwarded.

*** ~keepResponseHeaders~

   #+begin_src yaml
     - aggregation:
         - action:
             keepResponseHeaders:
               - 'content-type'
               - 'content-length'
   #+end_src

   When keepResponseHeaders is specified it lists all headers from the
   endpoints that will be returned to the backends.

   If keepResponseHeaders is not specified all headers will be
   returned.

* Building deployable images

  The repository includes a [[./Dockerfile][Dockerfile]] that can be used to build a
  deployable docker image, including the configuration provided in the
  [[./config][./config]] directory.

  Ensure [[https://www.docker.com/][Docker]] is installed and do the usual

  #+begin_src sh
  docker build .
  #+end_src

  To build the image

* Setting up development environment


  The OOAPI Gateway runs on NodeJS. For an ergonomic development
  environment you need [[https://www.docker.com/get-started][Docker]] and  [[https://nodejs.org/en/][NodeJS + NPM]].

** Installing node dependencies

   Install the JS dependencies in the ~./node_modules~ local
   directory. You do not need to install any modules globally.

   #+begin_src sh
     npm install
   #+end_src

** Running the gateway in development

   #+BEGIN_SRC sh
    npm start
   #+END_SRC

** Running tests

   #+begin_src sh
   npm test
   #+end_src

* License

  Copyright (C) 2020 SURFnet B.V.

  This program is free software: you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the Free
  Software Foundation, either version 3 of the License, or (at your option)
  any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
  more details.

  You should have received a copy of the GNU General Public License along
  with this program. If not, see http://www.gnu.org/licenses/.
